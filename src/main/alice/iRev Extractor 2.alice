/**************************************************************************************************************************************************************************************************************

iRev Extractor
-----------------------------------------------------------------------------------------------------------

Program: 	iRev Extractor.alice
 
Type:		Data extraction

Description:	This script extracts key data fields for the purpose of identifying abnormal intraday price movements.

Input(s):	None

Output(s): 	This program extracts data to files in the form 'iRev [MKT] YYYYDD.csv' where MKT is the exchange 
		identifier and the YYYYMMis the year followed by each month of the run.
		
Author: 	Matthew Clifton (matthew.clifton@alluvialtrading.com)

Date:  	20 May 2011

Version: 	2.0

Notes: 	- 

*************************************************************************************************************************************************************************************************************/

#include "config.alice"

userparams
	
	N_EVENTS : "Half of the number of of events after liquidity shock" : 5;

end userparams


// =======================================================================================================================================
// 	INIT
// =======================================================================================================================================

at start
	
	// Declare arrays
	declare id[security] : number

	declare last_bidvol[security] : volume
	declare last_askvol[security] : volume

	declare bid_before[security,number] : price
	declare ask_before[security,number] : price
	declare bidvol_before[security,number] : volume
	declare askvol_before[security,number] : volume
	
	declare bid_after[security,number] : price
	declare ask_after[security,number] : price
	declare bidvol_after[security,number] : volume
	declare askvol_after[security,number] : volume
					
	declare trade_time[security,number] : time
	declare trade_price_volume[security,number] : value
	declare trade_volume[security,number] : volume
			
	declare last_trade_time[security] : time
	declare liquidity_shock[security,number] : boolean
	
	declare blim_before[security,number] : number
	declare time_blim_before[security,number,number] : time
	declare bid_blim_before[security,number,number] : price
	declare ask_blim_before[security,number,number] : price
	declare bidvol_blim_before[security,number,number] : volume
	declare askvol_blim_before[security,number,number] : volume
	
	declare blim_after[security,number] : number
	declare time_blim_after[security,number,number] : time
	declare bid_blim_after[security,number,number] : price
	declare ask_blim_after[security,number,number] : price
	declare bidvol_blim_after[security,number,number] : volume
	declare askvol_blim_after[security,number,number] : volume
	
	declare erroneous_data[security] : zeroed boolean

	// Print output file headings
	declare let filename = "iRev [mkt[marketcode]] [dateStrFile()].csv"
	
	declare let headers1 = ""
	declare let headers2 = ""
	declare let headers3 = ""
	for declare let i = 1 ; i <= N_EVENTS ; i += 1 do
		headers1 = "[headers1];timeBefore[i];bidBefore[i];askBefore[i];bidVolBefore[i];askVolBefore[i]"
	end for
	for declare let i = 1 ; i <= N_EVENTS ; i += 1 do
		headers2 = "[headers2];timeAfter[i];bidAfter[i];askAfter[i];bidVolAfter[i];askVolAfter[i]"
	end for
	for declare let i = N_EVENTS+1 ; i <= 2*N_EVENTS ; i += 1 do
		headers3 = "[headers3];timeAfter[i];bidAfter[i];askAfter[i];bidVolAfter[i];askVolAfter[i]"
	end for
	
	printcsv filename, 
		"date", 
		"security", 
		"p_tcount", 
		"p_value", 
		"event_id", 
		headers1, 
		"time", 
		"bid_before", 
		"ask_before", 
		"bidvol_before", 
		"askvol_before", 
		"trade_vwap", 
		"trade_volume", 
		"bid_after", 
		"ask_after", 
		"bidvol_after", 
		"askvol_after",
		headers2,
		headers3 

end at

at daystart
	per security
		 id[security] = 0
	end per
end at

before mkttrade, entord, amdord, delord
	if tcount(date,date) > 0 then
		if time > open_auction_end[marketcode] and time < continuous_end[marketcode] then
			last_bidvol[security] = BidVolAtStep(0)
			last_askvol[security] = AskVolAtStep(0)
		end if
	end if
end before

// On trade
after mkttrade
	
	if time > open_auction_end[marketcode] and time < continuous_end[marketcode] then
	
		// Check for erroneous data
		if price >= 50 * closeprice(date) or price <= closeprice(date) / 50 then
			erroneous_data[security] = true
		else
			
			// Unique trade event (consolidate trades with the same timestamp)
			if undefined trade_time[security,id[security]] or time!= last_trade_time[security] then
				id[security] += 1
			end if
		
			bid_before[security,id[security]] = bidbefore
			ask_before[security,id[security]] = askbefore
			bidvol_before[security,id[security]] = last_bidvol[security]
			askvol_before[security,id[security]] = last_askvol[security]
			
			trade_time[security,id[security]] = time
			trade_price_volume[security,id[security]] += price * volume
			trade_volume[security,id[security]] += volume
			
			last_trade_time[security] = time
	
			bid_after[security,id[security]] = bidafter
			ask_after[security,id[security]] = askafter
			bidvol_after[security,id[security]] = BidVolAtStep(0)
			askvol_after[security,id[security]] = AskVolAtStep(0)
		
			declare let spread_before = 200 * (askbefore - bidbefore) / (bidbefore + askbefore)
			declare let spread_after = 200 * (askafter - bidafter) / (bidafter + askafter)
		
			if (defined bidbefore and defined askbefore and defined bidafter and defined askafter) and (spread_after > spread_before) then
				liquidity_shock[security,id[security]] = true
			else
				liquidity_shock[security,id[security]] = false
			end if
			
			blim_before[security,id[security]] = 0
			blim_after[security,id[security]] = 0
			
//			if security = ^AAQ then
//				print "[date] [time] [security] [id[security]] [bid_after[security,id[security]]] [ask_after[security,id[security]]] [bidvol_after[security,id[security]]] 
//					[askvol_after[security,id[security]]] [liquidity_shock[security,id[security]]] [blim_count[security,id[security]]] [spread_before] [spread_after]"
//			end if
			
		end if
	
	end if
	
end after

// BLim update
after entord, amdord, delord
	
	if tcount(date,date) > 0 then
	
		if time > open_auction_end[marketcode] and time < continuous_end[marketcode] then
		
			if (bidafter != bidbefore or askafter != askbefore or last_bidvol[security] != BidVolAtStep(0) or  last_askvol[security] != AskVolAtStep(0)) then
		
				// Store events before liquidity shock
				// ----------------------------------------------------------------------------
				for declare let k = 1 ; k <= id[security] ; k += 1 do
					
					if liquidity_shock[security,k] and blim_before[security,k] < N_EVENTS then
						
						if defined bidafter and defined askafter and defined BidVolAtStep(0) and defined AskVolAtStep(0) then
						
							blim_before[security,k] += 1
							time_blim_before[security,k,blim_before[security,k]] = time
							bid_blim_before[security,k,blim_before[security,k]] = bidafter
							ask_blim_before[security,k,blim_before[security,k]] = askafter
							bidvol_blim_before[security,k,blim_before[security,k]] = BidVolAtStep(0)
							askvol_blim_before[security,k,blim_before[security,k]] = AskVolAtStep(0)
	
	//						if security = ^AAQ then
	//							print "[k] [blim_before[security,k]] [time_blim_after[security,k,blim_before[security,k]]] [bid_blim_after[security,k,blim_before[security,k]]] [ask_blim_after[security,k,blim_before[security,k]]] 
	//								[bidvol_blim_after[security,k,blim_before[security,k]]] [askvol_blim_after[security,k,blim_before[security,k]]]"
	//						end if
							
						end if
							
					end if	
				end for
				
				// Store events after liquidity shock
				// ----------------------------------------------------------------------------
				for declare let k = 1 ; k <= id[security] ; k += 1 do
					
					if liquidity_shock[security,k] and blim_after[security,k] < 2*N_EVENTS then
						
						if defined bidafter and defined askafter and defined BidVolAtStep(0) and defined AskVolAtStep(0) then
						
							blim_after[security,k] += 1
							time_blim_after[security,k,blim_after[security,k]] = time
							bid_blim_after[security,k,blim_after[security,k]] = bidafter
							ask_blim_after[security,k,blim_after[security,k]] = askafter
							bidvol_blim_after[security,k,blim_after[security,k]] = BidVolAtStep(0)
							askvol_blim_after[security,k,blim_after[security,k]] = AskVolAtStep(0)
	
	//						if security = ^AAQ then
	//							print "[k] [blim_after[security,k]] [time_blim_after[security,k,blim_after[security,k]]] [bid_blim_after[security,k,blim_after[security,k]]] [ask_blim_after[security,k,blim_after[security,k]]] 
	//								[bidvol_blim_after[security,k,blim_after[security,k]]] [askvol_blim_after[security,k,blim_after[security,k]]]"
	//						end if
							
						end if
							
					end if	
				end for
				
			end if
		
		end if
	
	end if
	
end after

// At dayend
at dayend
	
	if istrading(date) then
	
		per security

			if tcount(date,date) > 0 and not(erroneous_data[security]) then
		
				for declare let i = 1 ; i <= id[security] ; i += 1 do

//					if security = ^AAQ then
//						print "[security] [i] [liquidity_shock[security,i]] [blim_count[security,i]]"
//					end if

					if liquidity_shock[security,i] and blim_after[security,i] = 2*N_EVENTS then

						declare let trade_vwap = trade_price_volume[security,i] / trade_volume[security,i]
	
						declare let data1 = ""
						declare let data2 = ""
						declare let data3 = ""
						for declare let n = 1 ; n <= N_EVENTS ; n += 1 do
							data1 = "[data1];[time_blim_before[security,i,n]];[number(bid_blim_before[security,i,n])];[number(ask_blim_before[security,i,n])];[number(bidvol_blim_before[security,i,n])];[number(askvol_blim_before[security,i,n])]"
						end for
						for declare let n = 1 ; n <= N_EVENTS ; n += 1 do
							data2 = "[data2];[time_blim_after[security,i,n]];[number(bid_blim_after[security,i,n])];[number(ask_blim_after[security,i,n])];[number(bidvol_blim_after[security,i,n])];[number(askvol_blim_after[security,i,n])]"
						end for
						for declare let n = N_EVENTS+1 ; n <= 2*N_EVENTS ; n += 1 do
							data3 = "[data3];[time_blim_after[security,i,n]];[number(bid_blim_after[security,i,n])];[number(ask_blim_after[security,i,n])];[number(bidvol_blim_after[security,i,n])];[number(askvol_blim_after[security,i,n])]"
						end for

						printcsv filename, 	
							date, 
							security, 
							tcount(yesterday), 
							value(yesterday), 
							i, 
							data1, 
							trade_time[security,i], 
							number(bid_before[security,i]), 
							number(ask_before[security,i]), 
							bidvol_before[security,i], 
							askvol_before[security,i], 
							number(trade_vwap), 
							trade_volume[security,i], 
							number(bid_after[security,i]), 
							number(ask_after[security,i]), 
							bidvol_after[security,i], 
							askvol_after[security,i], 
							data2, 
							data3
							
					end if

				end for
		
			end if
		
		end per
	
	free id[]

	free last_bidvol[]
	free last_askvol[]

	free bid_before[]
	free ask_before[]
	free bidvol_before[]
	free askvol_before[]
	
	free bid_after[]
	free ask_after[]
	free bidvol_after[]
	free askvol_after[]
					
	free trade_time[]
	free trade_price_volume[]
	free trade_volume[]
			
	free last_trade_time[]
	free liquidity_shock[]
	
	free blim_before[]
	free time_blim_before[]
	free bid_blim_before[]
	free ask_blim_before[]
	free bidvol_blim_before[]
	free askvol_blim_before[]
		
	free blim_after[]
	free time_blim_after[]
	free bid_blim_after[]
	free ask_blim_after[]
	free bidvol_blim_after[]
	free askvol_blim_after[]
	
	free erroneous_data[]
	
	end if
	
end at


