/**************************************************************************************************************************************************************************************************************

Sunset Extractor
-----------------------------------------------------------------------------------------------------------

Program: 	Sunset Extractor.alice
 
Type:		Data extraction

Description:	This script extracts key data fields for the purpose of identifying abnormal end-of-day price movements.

Input(s):	None

Output(s): 	This program extracts data to files in the form 'sunset [MKT] (YYYY.DD.MM).csv' where MKT is the exchange 
		identifier and the date is the year followed by each month of the run.

Author: 	Matthew Clifton (clifton.matthew@gmail.com)

Date:  	28 April 2011

Notes: 	- 

*************************************************************************************************************************************************************************************************************/

#define P1 5 minutes
#define P2 30 minutes
#define P3 120 minutes
#define yesterday trday(date,-1)

userparams

//	// ASX (asx mq)
//	MKT : "Name of stock market" : "ASX";
//	OPEN_AUCTION_END : "End of open auction" : 10:10:00;
//	CONTINUOUS_END : "End of continuous trading" : 16:00:00;
//	CLOSE_AUCTION_END : "End of close auction" : 16:10:00;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;

//	// BRAZIL (brazil_mq)
//	MKT : "Name of stock market" : "BRZ";
//	OPEN_AUCTION_END : "End of open auction" : 11:00:00;
//	CONTINUOUS_END : "End of continuous trading" : 17:55:00;
//	CLOSE_AUCTION_END : "End of close auction" : 18:00:00;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;

//	// DEUTSCHE BOERSE (xet_reuters_mq)
//	MKT : "Name of stock market" : "DEUT";
//	OPEN_AUCTION_END : "End of open auction" : 09:00:00;
//	CONTINUOUS_END : "End of continuous trading" : 17:30:00;
//	CLOSE_AUCTION_END : "End of close auction" : 17:35:00;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;

//	// EURONEXT (paris_mq)
//	MKT : "Name of stock market" : "EUR";
//	OPEN_AUCTION_END : "End of open auction" : 09:00:00;
//	CONTINUOUS_END : "End of continuous trading" : 17:25:00;
//	CLOSE_AUCTION_END : "End of close auction" : 17:30:00;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;

	// LSE (London Stock Exchange (no dups) (lse_mq))
	MKT : "Name of stock market" : "LSE";
	OPEN_AUCTION_END : "End of open auction" : 08:00:00;
	CONTINUOUS_END : "End of continuous trading" : 16:30:00;
	CLOSE_AUCTION_END : "End of close auction" : 16:35:00;
	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
 	SCALE : "Used to scale value amounts to dollars rather than cents" : 100;
	EXIT_TIME : "Simple exit time" : 10:00:00;

//	// NYSE (nyse_mq)
//	MKT : "Name of stock market" : "NYSE";
//	OPEN_AUCTION_END : "End of open auction" : 09:30:00;
//	CONTINUOUS_END : "End of continuous trading" : 16:00:00;
//	CLOSE_AUCTION_END : "End of close auction" : 16:00:00;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;

//	// NZX (nzx_mq)
//	MKT : "Name of stock market" : "NZX";
//	OPEN_AUCTION_END : "End of open auction" : 10:00:00;
//	CONTINUOUS_END : "End of continuous trading" : 16:45:00;
//	CLOSE_AUCTION_END : "End of close auction" : 17:00:00;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;

//	// NASDAQ OMX (omx mq2) -  Stockholm only
//	MKT : "Name of stock market" : "OMX";
//	OPEN_AUCTION_END : "End of open auction" : 09:00:00;
//	CONTINUOUS_END : "End of continuous trading" : 17:25:00;
//	CLOSE_AUCTION_END : "End of close auction" : 17:29:30;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;

//	// OSE (oslo_mq)
//	MKT : "Name of stock market" : "OSE";
//	OPEN_AUCTION_END : "End of open auction" : 09:00:00;
//	CONTINUOUS_END : "End of continuous trading" : 17:20:00;
//	CLOSE_AUCTION_END : "End of close auction" : 17:23:30;	// Prices seen to uncross before 17:25:00 (e.g. YAL.OL, 13/01/2010)
//	RANDOM : "Size of random/allowance period after open auction" : 120 seconds; // Oslo is supposed to open at 09:00 + 30s but seems to open up to 90s later ??
//	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;

//	// SGX (sgx_mq)
//	MKT : "Name of stock market" : "SGX";
//	OPEN_AUCTION_END : "End of open auction" : 09:00:00;
//	CONTINUOUS_END : "End of continuous trading" : 17:00:00;
//	CLOSE_AUCTION_END : "End of close auction" : 17:05:00;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Currency scale" : 1.3;

//	// SWX (swx mq)
//	MKT : "Name of stock market" : "SWX";
//	OPEN_AUCTION_END : "End of open auction" : 09:00:00;
//	CONTINUOUS_END : "End of continuous trading" : 17:20:00;
//	CLOSE_AUCTION_END : "End of close auction" : 17:30:00;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;

//	// HKX (hkx_mq)
//	MKT : "Name of stock market" : "HKX";
//	OPEN_AUCTION_END : "End of open auction" : 10:00:00;
//	CONTINUOUS_END : "End of continuous trading" : 15:55:00; 	// There is actually no closing auction
//	CLOSE_AUCTION_END : "End of close auction" : 16:00:00;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;

//	// TSE (tse_mq)
//	MKT : "Name of stock market" : "TSE";
//	OPEN_AUCTION_END : "End of open auction" : 09:00:00;
//	CONTINUOUS_END : "End of continuous trading" : 14:55:00; 	// There is actually no closing auction
//	CLOSE_AUCTION_END : "End of close auction" : 15:00:00;
//	RANDOM : "Size of random/allowance period after open auction" : 30 seconds;
// 	SCALE : "Used to scale value amounts to dollars rather than cents" : 1;
	
	MIN_LIQ : "Minimum number of daily trades yesterday" : 20; // Mainly to cut down on number of rows
	MIN_DAY_VAL : "Minimum value traded yesterday" : $40000 / SCALE; // Mainly to cut down on number of rows
	MIN_AUC_VAL : "Minimum value traded closing auction yesterday" : $10000 / SCALE; // Mainly to cut down on number of rows
	MAX_WEEKLY_CHANGE : "Maximum weekly price change (%)" : 20; // Only suitable for sunset algorithm !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	MAX_DAILY_CHANGE : "Maximum daily price change (%)" : 10; // Only suitable for sunset algorithm !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	ESCAPE_VALUE_1 : "Size of position to exit as percentage of yesterday'closing auction" : 20%;
	ESCAPE_VALUE_2 : "Size of position to exit as percentage of yesterday'closing auction" : 50%;

end userparams

at start

	// The names of any market indices
	declare index_name[string,number] : string
	index_name["LSE",1] = "FTSE"
	index_name["LSE",2] = "FTLC"
	index_name["LSE",3] = "FTMC"
	index_name["OSE",1] = "OBX"
	index_name["HKX",1] = "HSI"

end at

// =======================================================================================================================================
// 	FUNCTIONS
// =======================================================================================================================================

// Date string
function dateStr(date_ : date) : string
	
	//declare let d = day(date_)
	//if d < 10 then declare let dd = "0[d]" else declare let dd = "[d]" end if
	
	declare let m = month(date_)
	if m < 10 then declare let mm = "0[m]"	else declare let mm = "[m]" end if
	
	declare let yyyy = year(date_)
	
	return "[yyyy][mm]"
	
end dateStr

// =======================================================================================================================================
// 	INIT
// =======================================================================================================================================

at start
	
	// Declare arrays
	declare filename : string
	
	declare trade_hi[security] : price
	declare trade_lo[security] : price
	
	declare open_auction_price[security] : value
	declare open_auction_volume[security] : volume
	declare open_auction_value[security] : value
	
	declare open_vwap[security,time] : value
	declare open_volume[security,time] : volume
	declare open_value[security,time] : value
	
	declare open_exit_cumvalue[security,number] : value
	declare open_exit_volume[security,number] : volume
	
	declare close_vwap[security,time] : value
	declare close_volume[security,time] : volume
	declare close_value[security,time] : value
	
	declare last_time[security] : time
	declare last_ask_price[security] : price
	declare last_bid_price[security] : price
	declare last_true_price[security] : price
	
	declare close_auction_volume[security] : volume
	declare close_auction_value[date,security] : value
	
	declare extended[security] : zeroed number
	
	declare weekly_hi_dist : distribution
	declare weekly_lo_dist : distribution
	
	declare exit_price_simple[string] : number

end at

at daystart
	
	// If new month
	if (undefined filename or month(date) != month(yesterday)) and date != alertdate then
	
		// Print output file headings
		filename = "sunset [MKT] [dateStr(date)].csv"
		
		printcsv filename, 
			"date", 
			"security", 
			"instrument", 
			"market", 
			"p_day_trades", 
			"p_day_value", 
			"p_close_value", 
			"day_trades", 
			"day_volume", 
			"day_value", 
			"open_price", 
			"open_vwap", 
			"open_volume", 
			"open_value", 
			"open_vwap_[minute(P1)]", 
			"open_value_[minute(P1)]", 
			"open_vwap_[minute(P2)]", 
			"open_value_[minute(P2)]", 
			"open_vwap_[minute(P3)]", 
			"open_value_[minute(P3)]", 
			"exit_price", 
			"escape_price_1", 
			"escape_price_2", 
			"high_price_intraday", 
			"low_price_intraday", 
			"high_price", 
			"low_price", 
			"weekly_range", 
			"last_ask", 
			"last_bid", 
			"last_trueprice", 
			"last_event_time", 
			"close_vwap_[minute(P3)]", 
			"close_value_[minute(P3)]", 
			"close_vwap_[minute(P2)]", 
			"close_value_[minute(P2)]", 
			"close_vwap_[minute(P1)]", 
			"close_value_[minute(P1)]", 
			"close_price", 
			"close_volume", 
			"close_value", 
			"auction_extended"
		
	end if
		
end at

//// Get opening auction stats
//// ----------------------------------------------------------------------------------------------------------------------------------------
//on mkttrade
//	//if tcount(yesterday,yesterday) >= MIN_LIQ and value(yesterday,yesterday) >= MIN_DAY_VAL then
//		if time >= OPEN_AUCTION_END - 10 minutes and time <= OPEN_AUCTION_END + RANDOM then 	// flags(+UT) would be more accurate if you have it.
//			
////			if security = ^YAR.OL and date = 14/01/2010 then
////				print "[date] [time] [price] [volume]"
////			end if
//			
//			open_auction_volume[security] += volume
//			open_auction_value[security] += value / SCALE
//		end if
//		
//	//end if
//end on


//at dayend
//	per security
//		print "[date][security][tcount(yesterday,yesterday)] [close_auction_value[yesterday,security]]"
//	end per
//end at
	
// Get sunrise period stats
// ----------------------------------------------------------------------------------------------------------------------------------------
on mkttrade
	
	if tcount(yesterday,yesterday) >= MIN_LIQ and value(yesterday,yesterday) >= MIN_DAY_VAL and time >= OPEN_AUCTION_END - 10 minutes then
		
		// Sunrise data during first minutes of the trading day
		if time <= OPEN_AUCTION_END + RANDOM then
			open_auction_price[security] += volume * price
			open_auction_volume[security] += volume
			open_auction_value[security] += value
		end if
		if time <= OPEN_AUCTION_END + P1 then
			open_vwap[security,P1] += volume * price
			open_volume[security,P1] += volume
			open_value[security,P1] += value
		end if
		if time <= OPEN_AUCTION_END + P2 then
			open_vwap[security,P2] += volume * price
			open_volume[security,P2] += volume
			open_value[security,P2] += value
		end if
		if time <= OPEN_AUCTION_END + P3 then
			open_vwap[security,P3] += volume * price
			open_volume[security,P3] += volume
			open_value[security,P3] += value
		end if
		
		// Escape prices
		if undefined open_exit_cumvalue[security,1] or open_exit_cumvalue[security,1] < close_auction_value[yesterday,security]*ESCAPE_VALUE_1 then
			open_exit_cumvalue[security,1] += volume * price
			open_exit_volume[security,1] += volume
		end if
		if undefined open_exit_cumvalue[security,2] or open_exit_cumvalue[security,2] < close_auction_value[yesterday,security]*ESCAPE_VALUE_2 then
			open_exit_cumvalue[security,2] += volume * price
			open_exit_volume[security,2] += volume
		end if
		
	end if
end on

// Get simple exit price
// ----------------------------------------------------------------------------------------------------------------------------------------
at EXIT_TIME
	
	per security
		exit_price_simple["[security]"] = number(mpprice)
	end per
	
	for declare let i = 1 ; i <= 10 ; i += 1 do
		if defined index(index(index_name[MKT,i])) then
			exit_price_simple["[index(index_name[MKT,i])]"] = indexval(index(index_name[MKT,i]),time)
		end if
	end for
	
end at


// Get trade high and low before close auction
// ----------------------------------------------------------------------------------------------------------------------------------------
on mkttrade
	if tcount(yesterday,yesterday) >= MIN_LIQ and value(yesterday,yesterday) >= MIN_DAY_VAL and time >= OPEN_AUCTION_END - 10 minutes and time < CONTINUOUS_END then
		if undefined trade_hi[security] or price > trade_hi[security] then trade_hi[security] = price end if
		if undefined trade_lo[security] or price < trade_lo[security] then trade_lo[security] = price end if
	end if
end on

// Get sunset period stats
// ----------------------------------------------------------------------------------------------------------------------------------------
on mkttrade
	if tcount(yesterday,yesterday) >= MIN_LIQ and value(yesterday,yesterday) >= MIN_DAY_VAL then
		
		// Sunset data during last minutes of the trading day
		if time >= CONTINUOUS_END - P1 and time < CONTINUOUS_END then
			close_vwap[security,P1] += volume * price
			close_volume[security,P1] += volume
			close_value[security,P1] += value
		end if
		if time >= CONTINUOUS_END - P2 and time < CONTINUOUS_END then
			close_vwap[security,P2] += volume * price
			close_volume[security,P2] += volume
			close_value[security,P2] += value
		end if
		if time >= CONTINUOUS_END - P3 and time < CONTINUOUS_END then
			close_vwap[security,P3] += volume * price
			close_volume[security,P3] += volume
			close_value[security,P3] += value
		end if
		
		// Get end of continuous trading stats (don't use 'at time' function because data may be 5 minutes old)
		if (undefined last_time[security] or time > last_time[security]) and time > CONTINUOUS_END - 1 hours and time < CONTINUOUS_END  then
			//last_ask_price[security] = ask 	//askafter is undefined
			//last_bid_price[security] = bid
			//last_true_price[security] = trueprice
			last_time[security] = time
		end if

	end if
end on

// Get end of continuous trading stats
// ----------------------------------------------------------------------------------------------------------------------------------------
on quote
//at CONTINUOUS_END - 1 seconds
	//if istrading(date) then
		//per security
			if tcount(yesterday,yesterday) >= MIN_LIQ and value(yesterday,yesterday) >= MIN_DAY_VAL then
				if time < CONTINUOUS_END - 1 seconds then
				last_ask_price[security] = ask
				last_bid_price[security] = bid
				last_true_price[security] = trueprice
				end if
			end if
		//end per
	//end if
//end at
end on

// Get closing auction stats
// ----------------------------------------------------------------------------------------------------------------------------------------
on mkttrade
	if tcount(yesterday,yesterday) >= MIN_LIQ and value(yesterday,yesterday) >= MIN_DAY_VAL then
		if time >= CLOSE_AUCTION_END and time <= CLOSE_AUCTION_END + 20 minutes then // flags(+UT) would be more accurate if you have it.
			close_auction_volume[security] += volume
			close_auction_value[date,security] += value
//			if security = ^AMP.AX then
//				print "[date] [security] [time] [value] [volume] [price]"
//			end if
		end if
		if MKT = "LSE" and time > CLOSE_AUCTION_END + 30 seconds then // LSE Price Monitoring Extension
			extended[security] = 1
		else
			extended[security] = 0
		end if
		
	end if
end on

// End of day stuff
// ----------------------------------------------------------------------------------------------------------------------------------------
at dayend
	if istrading(date) and date != alertdate then

		// Print index data
		for declare let i = 1 ; i <= 10 ; i += 1 do
			if defined index(index(index_name[MKT,i])) then
				
				// Weekly range
				free weekly_hi_dist[]
				weekly_hi_dist <- indexvalMax(index(index_name[MKT,i]),yesterday)
				weekly_hi_dist <- indexvalMax(index(index_name[MKT,i]),trday(yesterday,-1))
				weekly_hi_dist <- indexvalMax(index(index_name[MKT,i]),trday(yesterday,-2))
				weekly_hi_dist <- indexvalMax(index(index_name[MKT,i]),trday(yesterday,-3))
				weekly_hi_dist <- indexvalMax(index(index_name[MKT,i]),trday(yesterday,-4))
				declare let weekly_hi = distmax(weekly_hi_dist)
				free weekly_lo_dist[]
				weekly_lo_dist <- indexvalMin(index(index_name[MKT,i]),yesterday)
				weekly_lo_dist <- indexvalMin(index(index_name[MKT,i]),trday(yesterday,-1))
				weekly_lo_dist <- indexvalMin(index(index_name[MKT,i]),trday(yesterday,-2))
				weekly_lo_dist <- indexvalMin(index(index_name[MKT,i]),trday(yesterday,-3))
				weekly_lo_dist <- indexvalMin(index(index_name[MKT,i]),trday(yesterday,-4))
				declare let weekly_lo = distmin(weekly_lo_dist)
				declare let weekly_range = 100* (weekly_hi - weekly_lo) / ((weekly_hi + weekly_lo)/2)
				
				printcsv filename, 
					date, 
					index(index_name[MKT,i]), 
					"I", 
					MKT, 
					"", 
					"", 
					"", 
					"", 
					"", 
					"", 
					number(indexvalOpen(index(index_name[MKT,i]),date)), 
					"", 
					"", 
					"", 
					"", 
					"", 
					"", 
					"", 
					"", 
					"", 
					format(exit_price_simple["[index(index_name[MKT,i])]"],5,3), 
					"", 
					"", 
					"", 
					"", 
					number(indexvalMax(index(index_name[MKT,i]),date)), 
					number(indexvalMin(index(index_name[MKT,i]),date)), 
					weekly_range, 
					"", 
					"", 
					"", 
					"", 
					"", 
					"", 
					"", 
					"", 
					"", 
					"", 
					number(indexvalClose(index(index_name[MKT,i]),date)), 
					"", 
					"", 
					""

			end if
		end for		
		
		// Print stock data
		per security

			if tcount(yesterday,yesterday) >= MIN_LIQ 
				and value(yesterday,yesterday) >= MIN_DAY_VAL 
				and close_auction_value[yesterday,security] >= MIN_AUC_VAL then
				
				// Vwap prices
				declare let open_auction_price = open_auction_price[security] / open_auction_volume[security]
				declare let open_vwap_p1 = open_vwap[security,P1] / open_volume[security,P1]
				declare let open_vwap_p2 = open_vwap[security,P2] / open_volume[security,P2]
				declare let open_vwap_p3 = open_vwap[security,P3] / open_volume[security,P3]
				
				declare let close_vwap_p1 = close_vwap[security,P1] / close_volume[security,P1]
				declare let close_vwap_p2 = close_vwap[security,P2] / close_volume[security,P2]
				declare let close_vwap_p3 = close_vwap[security,P3] / close_volume[security,P3]
				
				// Escape price
				declare let escape_price_1 = open_exit_cumvalue[security,1] / open_exit_volume[security,1]
				declare let escape_price_2 = open_exit_cumvalue[security,2] / open_exit_volume[security,2]

				// Weekly range
				free weekly_hi_dist[]
				weekly_hi_dist <- maxprice(yesterday)
				weekly_hi_dist <- maxprice(trday(yesterday,-1))
				weekly_hi_dist <- maxprice(trday(yesterday,-2))
				weekly_hi_dist <- maxprice(trday(yesterday,-3))
				weekly_hi_dist <- maxprice(trday(yesterday,-4))
				declare let weekly_hi = distmax(weekly_hi_dist)
				free weekly_lo_dist[]
				weekly_lo_dist <- minprice(yesterday)
				weekly_lo_dist <- minprice(trday(yesterday,-1))
				weekly_lo_dist <- minprice(trday(yesterday,-2))
				weekly_lo_dist <- minprice(trday(yesterday,-3))
				weekly_lo_dist <- minprice(trday(yesterday,-4))
				declare let weekly_lo = distmin(weekly_lo_dist)
				declare let weekly_range = 100* (weekly_hi - weekly_lo) / ((weekly_hi + weekly_lo)/2)
				
//				if security=^YAR.OL then
//					print "[date] [security] [maxprice(date)] [minprice(date)]"
//				end if

				// Print details
		 		printcsv filename, 
					date, 
					security, 
					"E", 
					MKT, 
					tcount(yesterday,yesterday), 
					number(value(yesterday,yesterday) / SCALE), 
					number(close_auction_value[yesterday,security] / SCALE), 
					tcount(date,date), 
					volume(date,date), 
					number(value(date,date) / SCALE), 
					number(openprice(date)), 
					number(open_auction_price),  
					open_auction_volume[security], 
					number(open_auction_value[security]), 
					format(open_vwap_p1,5,3), 
					number(open_value[security,P1] / SCALE), 
					format(open_vwap_p2,5,3), 
					number(open_value[security,P2] / SCALE), 
					format(open_vwap_p3,5,3), 
					number(open_value[security,P3] / SCALE), 
					format(exit_price_simple["[security]"],5,3), 
					format(escape_price_1,5,3), 
					format(escape_price_2,5,3), 
					number(trade_hi[security]), 
					number(trade_lo[security]), 
					number(maxprice(date)),
					number(minprice(date)), 
					weekly_range, 
					number(last_ask_price[security]), 
					number(last_bid_price[security]), 
					number(last_true_price[security]), 
					last_time[security], 
					format(close_vwap_p3,5,3), 
					number(close_value[security,P3] / SCALE), 
					format(close_vwap_p2,5,3), 
					number(close_value[security,P2] / SCALE), 
					format(close_vwap_p1,5,3), 
					number(close_value[security,P1] / SCALE), 
					number(closeprice(date)), 
					close_auction_volume[security], 
					number(close_auction_value[date,security] / SCALE), 
					extended[security]
				
			end if
		
			//close_auction_value[yesterday,security] = dummyvalue

		end per

		free trade_hi[]
		free trade_lo[]
		
		free open_auction_price[]
		free open_auction_volume[]
		free open_auction_value[]
		
		free open_vwap[]
		free open_volume[]
		free open_value[]
		
		free open_exit_cumvalue[]
		free open_exit_volume[]
		
		free close_vwap[]
		free close_volume[]
		free close_value[]
		
		free last_ask_price[]
		free last_bid_price[]
		free last_true_price[]
		free last_time[]
		
		free close_auction_volume[]
		//free close_auction_value[]
		
		free extended[]
		
		free exit_price_simple[]

	end if

end at
